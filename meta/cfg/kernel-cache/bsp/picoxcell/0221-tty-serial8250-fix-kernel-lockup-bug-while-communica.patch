From 2c7b13ee2142523eab9a08ab7967f2a772c26628 Mon Sep 17 00:00:00 2001
From: Paul Richardson <paulr@picochip.com>
Date: Wed, 1 Jan 2014 22:49:07 +0000
Subject: [PATCH 221/228] tty: serial8250: fix kernel lockup bug while communicating to GPS module through serial device /dev/ttyS0

Mantis Issue #11261
---
 drivers/tty/serial/8250.c  |  230 +++++++++++++++++++++++++++++++++++++++++++-
 include/linux/serial_reg.h |    7 ++
 2 files changed, 234 insertions(+), 3 deletions(-)

diff --git a/drivers/tty/serial/8250.c b/drivers/tty/serial/8250.c
index d36d6e6..5a44081 100644
--- a/drivers/tty/serial/8250.c
+++ b/drivers/tty/serial/8250.c
@@ -44,6 +44,8 @@
 
 #include "8250.h"
 
+#define PICOCHIP_VERSION "(2) "
+
 #ifdef CONFIG_SPARC
 #include "suncore.h"
 #endif
@@ -593,6 +595,45 @@ static void serial_dl_write(struct uart_8250_port *up, int value)
 		_serial_dl_write(up, value);
 	}
 }
+#elif defined(CONFIG_ARCH_PICOXCELL)
+
+/* Don't worry about serial_dl_read - its only used in autoconf */
+#define serial_dl_read(up) _serial_dl_read(up)
+
+static void serial_dl_write(struct uart_8250_port *up, int value)
+{
+	unsigned int lo=0, hi=0;
+	unsigned int out_lo = value & 0xff;
+	unsigned int out_hi = value >> 8 & 0xff;
+	unsigned int v;
+
+	v = serial_inp(up, UART_LCR);
+	if ((v & 0x80) == 0) {
+		/* LCR bit 7 must be 1 to write DL regs */
+		if (up->port.irq != 9) printk("8250.c: serial_dl_write: LCR=%02X\n", v);
+		return;
+	}
+
+	v = serial_inp(up, PICOXCELL_UART_USR);
+	if (v & 0x01) {
+		/* USR bit 0 must be 0 to write DL regs */
+		if (up->port.irq != 9) printk("8250.c: serial_dl_write: USR=%02X\n", v);
+	}
+
+	serial_outp(up, UART_DLL, out_lo);
+	serial_outp(up, UART_DLM, out_hi);
+
+	lo = serial_inp(up, UART_DLL);
+	hi = serial_inp(up, UART_DLM);
+
+	/* verify */
+	if ((lo != out_lo) || (hi != out_hi)) {
+		if (up->port.irq != 9)
+			printk("8250.c: serial_dl_write: couldn't write DL regs, wrote %02X,%02X, read %02X,%02X\n",
+			      out_hi, out_lo, hi, lo);
+	}
+
+}
 #else
 #define serial_dl_read(up) _serial_dl_read(up)
 #define serial_dl_write(up, value) _serial_dl_write(up, value)
@@ -654,6 +695,134 @@ static void serial8250_set_sleep(struct uart_8250_port *p, int sleep)
 	}
 }
 
+#if defined(CONFIG_ARCH_PICOXCELL)
+/* Wait for UART to go to idle */
+#define PICOXCELL_IDLE_TIMEOUT ((HZ+9)/10)
+static unsigned int picoxcell_wait_for_idle(struct uart_8250_port *up)
+{
+	unsigned int count=0;
+	unsigned long j;
+	unsigned int lsr=0, usr=0, iir=0;
+
+	j = jiffies;
+	while (1) {
+		/* We seem to need all these register reads to get UART to go IDLE */
+		lsr = serial_inp(up, UART_LSR);
+		(void)serial_inp(up, UART_RX);
+		iir = serial_inp(up, UART_IIR);
+		usr = serial_inp(up, PICOXCELL_UART_USR);
+
+		if ((usr & 1) == 0) {
+			break;
+		}
+
+		if ((jiffies - j) > PICOXCELL_IDLE_TIMEOUT) {
+			if (up->port.irq != 9) {
+			    printk("8250.c: timeout waiting for UART idle, lsr=%02X usr=%02X, iir=%02X\n",
+				   lsr, usr, iir);
+			}
+			break;
+		}
+		count++;
+		udelay(1);
+	}
+
+	return count;
+}
+
+
+#define PICOXCELL_RESET_TIMEOUT ((HZ+99)/100)
+static void picoxcell_reset_uart(struct uart_8250_port *up)
+{
+	unsigned int lcr, lsr;
+	unsigned long j;
+
+	/* Reset as much as we can and put into loop back mode */
+	/* This seems necessary to get UART to go to IDLE */
+	serial_outp(up, UART_MCR, UART_MCR_LOOP);
+	serial_outp(up, UART_IER, 0);
+	/* clear any break condition in tx (this bit DOES work!) */
+	lcr = serial_inp(up, UART_LCR);
+	serial_outp(up, UART_LCR, lcr & ~UART_LCR_SBC);
+	serial_outp(up, UART_FCR, 6);
+
+	/* 
+	 * The UART could have just started processing a rx character and
+	 * it won't show in the USR BUSY bit for half a character time.
+	 * So we need to pause for at least that long.
+	 * Half a bit time @ 600 baud is 0.4 ms.
+	 * NOTE: I increased this to 10 before adding the drain loop below, so
+	 * it could probably be reduced back down to 1ms, but there isn't time
+	 * for another round of testing.
+	 */
+	mdelay(10);
+
+	/* Drain any chars in rx or tx buffers */	
+	j = jiffies;
+	while (1) {
+		lsr = serial_inp(up, UART_LSR);
+		serial_inp(up, UART_RX);
+		serial_inp(up, UART_IIR);
+
+		/* 
+		 * We're looking for:
+		 *	TEMT=1
+		 *	THRE=1
+		 *	BI  =0
+		 *	DR  =0
+		 */
+#define PICOXCELL_LSR_IDLE_MASK  (UART_LSR_TEMT | UART_LSR_THRE | UART_LSR_BI | UART_LSR_DR)
+#define PICOXCELL_LSR_IDLE_VALUE (UART_LSR_TEMT | UART_LSR_THRE)
+		if ((lsr & PICOXCELL_LSR_IDLE_MASK) == PICOXCELL_LSR_IDLE_VALUE)
+		{
+		    break;
+		}
+
+		/* Safety timeout check so we don't spin for ever */
+		if ((jiffies - j) > PICOXCELL_RESET_TIMEOUT)
+		{
+			if (up->port.irq != 9) {
+			    printk("8250.c: timeout draining UART, lsr=%02X\n", lsr);
+			}
+			break;
+		}
+	}
+}
+
+#define PICOXCELL_LCR_MAX_RETRIES 10
+static void picoxcell_set_lcr(struct uart_8250_port *up, unsigned int cval)
+{
+	unsigned int v;
+	int try;
+
+	/* Mask out reserved bit (just being cautious) */
+	cval &= 0xDF;
+
+	/* 
+	 * The loop is defensive, if the other measures to detect
+	 * UART Busy have worked, we should successfully write LCR first time.
+	 */
+	for (try = 0; try < PICOXCELL_LCR_MAX_RETRIES; try++) {
+		picoxcell_wait_for_idle(up);
+		serial_outp(up, UART_LCR, cval);
+		/* verify */
+		v = serial_inp(up, UART_LCR);
+		if (v == cval) {
+			/* Success! */
+			break;
+		}
+
+		/* Failed, try resetting again */
+		if (up->port.irq != 9) {
+			printk("Failed to write LCR: tried %02X, actual %02X, usr=%02X\n",
+			       cval, v, serial_inp(up, PICOXCELL_UART_USR));
+		}
+		picoxcell_reset_uart(up);
+	}
+}
+#endif /* CONFIG_ARCH_PICOXCELL */
+
+
 #ifdef CONFIG_SERIAL_8250_RSA
 /*
  * Attempts to turn on the RSA FIFO.  Returns zero on failure.
@@ -1584,8 +1753,21 @@ int serial8250_handle_irq(struct uart_port *port, unsigned int iir)
 	if (!(iir & UART_IIR_NO_INT)) {
 		serial8250_handle_port(up);
 		return 1;
-	}
-
+	}        
+#if defined(CONFIG_ARCH_PICOXCELL)
+	/* 
+	 * If we are supporting the Synopsys UART
+	 * we need to handle the additional 
+	 * 'busy' interrupt. We simply reset the 
+	 * interrupt condition and handle the interrupt.
+	 */
+	else if ((iir & PICOXCELL_UART_IIR_ID_MASK) ==
+		UART_IIR_BUSY) {
+		/* Read USR to clear busy interrupt */
+		serial_in(up, PICOXCELL_UART_USR);
+		return 1;
+        }
+#endif
 	return 0;
 }
 
@@ -2356,7 +2538,31 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 	 * Ok, we're now changing the port state.  Do it with
 	 * interrupts disabled.
 	 */
+#if defined(CONFIG_ARCH_PICOXCELL)
+	/* 
+	 * We must disable interrupts to prevent the UART starting up again
+	 * if an application writes data to the device.
+	 * Also programming the LCR can take a long time (1 character time).
+	 * So we disable just the UART interrupt to allow the rest of the 
+	 * kernel to continue to operate.
+	 */
+	disable_irq(up->port.irq);
+
+	/* Should be safe to lock unconditionally with interrupts disabled */
+	spin_lock(&up->port.lock);
+
+	/* 
+	 * Do a software reset. This will clear all regs and stop the UART
+	 * so its not busy when we write to the DLL, DLH and LCR registers.
+	 * The rest of the code fully reconfigures the UART.
+	 */
+	picoxcell_reset_uart(up);
+
+	/* Silence compiler warning */
+	(void)flags;
+#else
 	spin_lock_irqsave(&up->port.lock, flags);
+#endif /* CONFIG_ARCH_PICOXCELL */
 
 	/*
 	 * Update the per-port timeout.
@@ -2430,12 +2636,16 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 	}
 #endif
 
+#if defined(CONFIG_ARCH_PICOXCELL)
+	picoxcell_set_lcr(up, cval | UART_LCR_DLAB);/* set DLAB */
+#else
 	if (up->capabilities & UART_NATSEMI) {
 		/* Switch to bank 2 not bank 1, to avoid resetting EXCR2 */
 		serial_outp(up, UART_LCR, 0xe0);
 	} else {
 		serial_outp(up, UART_LCR, cval | UART_LCR_DLAB);/* set DLAB */
 	}
+#endif /* CONFIG_ARCH_PICOXCELL */
 
 	serial_dl_write(up, quot);
 
@@ -2446,7 +2656,11 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 	if (up->port.type == PORT_16750)
 		serial_outp(up, UART_FCR, fcr);
 
+#if defined(CONFIG_ARCH_PICOXCELL)
+	picoxcell_set_lcr(up, cval);			/* reset DLAB */
+#else
 	serial_outp(up, UART_LCR, cval);		/* reset DLAB */
+#endif /* CONFIG_ARCH_PICOXCELL */
 	up->lcr = cval;					/* Save LCR */
 	if (up->port.type != PORT_16750) {
 		if (fcr & UART_FCR_ENABLE_FIFO) {
@@ -2456,7 +2670,12 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 		serial_outp(up, UART_FCR, fcr);		/* set fcr */
 	}
 	serial8250_set_mctrl(&up->port, up->port.mctrl);
+#if defined(CONFIG_ARCH_PICOXCELL)
+	spin_unlock(&up->port.lock);
+	enable_irq(up->port.irq);
+#else
 	spin_unlock_irqrestore(&up->port.lock, flags);
+#endif /* CONFIG_ARCH_PICOXCELL */
 	/* Don't rewrite B0 */
 	if (tty_termios_baud_rate(termios))
 		tty_termios_encode_baud_rate(termios, baud, baud);
@@ -3254,6 +3473,11 @@ int serial8250_register_port(struct uart_port *port)
 			serial8250_isa_config(0, &uart->port,
 					&uart->capabilities);
 
+#if defined(CONFIG_ARCH_PICOXCELL)
+		/* Only allow loopback bit to be set */
+		uart->mcr_mask = 0x10;
+#endif /* CONFIG_ARCH_PICOXCELL */
+
 		ret = uart_add_one_port(&serial8250_reg, &uart->port);
 		if (ret == 0)
 			ret = uart->port.line;
@@ -3297,7 +3521,7 @@ static int __init serial8250_init(void)
 	if (nr_uarts > UART_NR)
 		nr_uarts = UART_NR;
 
-	printk(KERN_INFO "Serial: 8250/16550 driver, "
+	printk(KERN_INFO "Serial: 8250/16550 driver, " PICOCHIP_VERSION
 		"%d ports, IRQ sharing %sabled\n", nr_uarts,
 		share_irqs ? "en" : "dis");
 
diff --git a/include/linux/serial_reg.h b/include/linux/serial_reg.h
index c75bda3..6e7a68d 100644
--- a/include/linux/serial_reg.h
+++ b/include/linux/serial_reg.h
@@ -362,5 +362,12 @@
 #define UART_OMAP_MDR1_CIR_MODE		0x06	/* CIR mode */
 #define UART_OMAP_MDR1_DISABLE		0x07	/* Disable (default state) */
 
+/* 
+ * Extra serial register definitions for the Synopsys UARTs in
+ * picoChip processors.
+ */
+#define PICOXCELL_UART_USR                        0x1f    /* UART Status Register */
+#define PICOXCELL_UART_IIR_ID_MASK                0x0F    /* Interrupt ID mask */
+
 #endif /* _LINUX_SERIAL_REG_H */
 
-- 
1.7.0.4

