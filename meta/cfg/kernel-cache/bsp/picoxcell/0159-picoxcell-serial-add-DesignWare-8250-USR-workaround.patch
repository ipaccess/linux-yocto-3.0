From a7dbbcbc99d90309e2cdae6a8f6329bf11a47adc Mon Sep 17 00:00:00 2001
From: Jamie Iles <jamie@jamieiles.com>
Date: Wed, 15 Jun 2011 13:01:13 +0100
Subject: [PATCH 159/228] picoxcell/serial: add DesignWare 8250 USR workaround

---
 arch/arm/mach-picoxcell/device_uart.c |   61 ++++++++++++++++++++++++++++++---
 1 files changed, 56 insertions(+), 5 deletions(-)

diff --git a/arch/arm/mach-picoxcell/device_uart.c b/arch/arm/mach-picoxcell/device_uart.c
index 3af461b..8169dbb 100644
--- a/arch/arm/mach-picoxcell/device_uart.c
+++ b/arch/arm/mach-picoxcell/device_uart.c
@@ -8,9 +8,12 @@
  * All enquiries to support@picochip.com
  */
 #include <linux/clk.h>
+#include <linux/io.h>
 #include <linux/platform_device.h>
+#include <linux/serial_core.h>
 #include <linux/serial_8250.h>
 #include <linux/serial_reg.h>
+#include <linux/slab.h>
 
 #include <mach/hardware.h>
 #include <mach/io.h>
@@ -19,6 +22,45 @@
 
 #define UART_USR_REG_OFFSET			0x7C
 
+struct picoxcell_uart_data {
+	int	last_lcr;
+};
+
+static void picoxcell_serial_out(struct uart_port *p, int offset, int value)
+{
+	struct picoxcell_uart_data *d = p->private_data;
+
+	if (offset == UART_LCR)
+		d->last_lcr = value;
+
+	offset <<= p->regshift;
+	writel(value, p->membase + offset);
+}
+
+static unsigned int picoxcell_serial_in(struct uart_port *p, int offset)
+{
+	offset <<= p->regshift;
+
+	return readl(p->membase + offset);
+}
+
+static int picoxcell_serial_handle_irq(struct uart_port *p)
+{
+	struct picoxcell_uart_data *d = p->private_data;
+	unsigned int iir = readl(p->membase + (UART_IIR << p->regshift));
+
+	if (serial8250_handle_irq(p, iir)) {
+		return 1;
+	} else if ((iir & UART_IIR_BUSY) == UART_IIR_BUSY) {
+		(void)readl(p->membase + UART_USR_REG_OFFSET);
+		writel(d->last_lcr, p->membase + (UART_LCR << p->regshift));
+
+		return 1;
+	}
+
+	return 0;
+}
+
 struct platform_device * __init picoxcell_add_uart(unsigned long addr,
 						   int irq, int id)
 {
@@ -28,12 +70,12 @@ struct platform_device * __init picoxcell_add_uart(unsigned long addr,
 			.mapbase	= addr,
 			.irq		= irq,
 			.flags		= UPF_BOOT_AUTOCONF,
-			.iotype		= UPIO_DWAPB32,
+			.iotype		= UPIO_MEM32,
 			.regshift	= 2,
 			.uartclk	= PICOXCELL_BASE_BAUD,
-			.private_data	=
-				(void *)(PHYS_TO_IO(PICOXCELL_UART1_BASE +
-						    UART_USR_REG_OFFSET)),
+			.serial_out	= picoxcell_serial_out,
+			.serial_in	= picoxcell_serial_in,
+			.handle_irq	= picoxcell_serial_handle_irq,
 		},
 		{},
 	};
@@ -60,17 +102,26 @@ struct platform_device * __init picoxcell_add_uart(unsigned long addr,
 	if (err)
 		goto out_put_clk;
 
+	pdata[0].private_data = kzalloc(sizeof(struct picoxcell_uart_data),
+					GFP_KERNEL);
+	if (!pdata[0].private_data) {
+		err = -ENOMEM;
+		goto out_disable_clk;
+	}
+
 	pdata[0].uartclk = clk_get_rate(uart_clk);
 	pdev = platform_device_register_resndata(NULL, "serial8250",
 		id + PLAT8250_DEV_PLATFORM1, res, ARRAY_SIZE(res), pdata,
 		sizeof(pdata));
 	if (IS_ERR(pdev)) {
 		err = PTR_ERR(pdev);
-		goto out_disable_clk;
+		goto out_free_priv;
 	}
 
 	return pdev;
 
+out_free_priv:
+	kfree(pdata[0].private_data);
 out_disable_clk:
 	clk_disable(uart_clk);
 out_put_clk:
-- 
1.7.0.4

