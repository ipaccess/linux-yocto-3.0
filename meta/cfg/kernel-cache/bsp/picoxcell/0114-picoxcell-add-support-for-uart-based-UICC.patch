From b495e3a967c4a396d6cc01967d0e2aa938f4448f Mon Sep 17 00:00:00 2001
From: Jamie Iles <jamie@jamieiles.com>
Date: Tue, 3 May 2011 17:01:45 +0100
Subject: [PATCH 114/228] picoxcell: add support for uart based UICC

The UART based UICC controller allows userspace to implement a UICC
stack.  This adds a new UART which may be used to send and receive data
to/from the UICC device and adds a clk_en attribute to the device that
can be used to turn the clock on and off.  Note that the configuration
means that data sent to the device will be echoed back to the serial
port and needs to be removed in userspace.

Signed-off-by: Jamie Iles <jamie@jamieiles.com>
---
 arch/arm/mach-picoxcell/Kconfig                    |    9 ++
 arch/arm/mach-picoxcell/Makefile                   |    1 +
 arch/arm/mach-picoxcell/device_uicc.c              |  113 ++++++++++++++++++++
 .../include/mach/picoxcell/axi2cfg.h               |    1 +
 arch/arm/mach-picoxcell/mux.c                      |    1 +
 arch/arm/mach-picoxcell/mux.h                      |    4 +
 arch/arm/mach-picoxcell/pc30xx.c                   |    4 +-
 arch/arm/mach-picoxcell/picoxcell_core.h           |    2 +
 8 files changed, 133 insertions(+), 2 deletions(-)
 create mode 100644 arch/arm/mach-picoxcell/device_uicc.c

diff --git a/arch/arm/mach-picoxcell/Kconfig b/arch/arm/mach-picoxcell/Kconfig
index 9daa8c5..b8eedc0 100644
--- a/arch/arm/mach-picoxcell/Kconfig
+++ b/arch/arm/mach-picoxcell/Kconfig
@@ -46,4 +46,13 @@ config BOARD_PC7302
 config PICOXCELL_HAVE_TSU
 	bool
 
+config PICOXCELL_UICC
+	bool "Support for UART based UICC controller"
+	depends on PICOXCELL_PC30XX
+	help
+	  Say Y here to include support for the UART based UICC controller.
+	  This uses a UART along with some GPIO pins to allow userspace to
+	  read/write UICC devices.  The protocol implementation is handled in
+	  userspace.
+
 endif
diff --git a/arch/arm/mach-picoxcell/Makefile b/arch/arm/mach-picoxcell/Makefile
index 2429e98..a8bc1d2 100644
--- a/arch/arm/mach-picoxcell/Makefile
+++ b/arch/arm/mach-picoxcell/Makefile
@@ -19,3 +19,4 @@ obj-$(CONFIG_PICOXCELL_PC30XX)	+= pc30xx.o
 obj-$(CONFIG_CPU_FREQ)		+= cpufreq.o
 obj-$(CONFIG_PM)		+= pm.o
 obj-$(CONFIG_PICOXCELL_HAVE_TSU)+= tsu.o
+obj-$(CONFIG_PICOXCELL_UICC)	+= device_uicc.o
diff --git a/arch/arm/mach-picoxcell/device_uicc.c b/arch/arm/mach-picoxcell/device_uicc.c
new file mode 100644
index 0000000..8a6e068
--- /dev/null
+++ b/arch/arm/mach-picoxcell/device_uicc.c
@@ -0,0 +1,113 @@
+/*
+ * Copyright (c) 2011 Picochip Ltd., Jamie Iles
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * All enquiries to support@picochip.com
+ */
+#include <linux/clk.h>
+#include <linux/err.h>
+#include <linux/mutex.h>
+#include <linux/platform_device.h>
+
+#include <mach/hardware.h>
+#include <mach/io.h>
+
+#include "mux.h"
+#include "picoxcell_core.h"
+
+#define UICC_CLK_EN_MASK	(1 << 3)
+#define UICC_DATA_EN_MASK	(1 << 2)
+#define UICC_DATA_INVERT_MASK	(1 << 0)
+
+static DEFINE_MUTEX(uicc_cfg_mutex);
+
+static ssize_t uicc_clk_en_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	unsigned long uicc_cfg;
+
+	if (mutex_lock_interruptible(&uicc_cfg_mutex))
+		return -ERESTARTSYS;
+
+	uicc_cfg = axi2cfg_readl(AXI2CFG_UICC_CFG_REG_OFFSET);
+
+	mutex_unlock(&uicc_cfg_mutex);
+
+	return sprintf(buf, "%s\n", uicc_cfg & UICC_CLK_EN_MASK ?
+		       "enabled" : "disabled");
+}
+
+static ssize_t uicc_clk_en_store(struct device *dev,
+				 struct device_attribute *attr,
+				 const char *buf, size_t len)
+{
+	unsigned long uicc_cfg;
+	int enable = 0;
+
+	if (sysfs_streq(buf, "enabled"))
+		enable = 1;
+	else if (!sysfs_streq(buf, "disabled"))
+		return -EINVAL;
+
+	if (mutex_lock_interruptible(&uicc_cfg_mutex))
+		return -ERESTARTSYS;
+
+	uicc_cfg = axi2cfg_readl(AXI2CFG_UICC_CFG_REG_OFFSET);
+	uicc_cfg &= ~UICC_CLK_EN_MASK;
+	if (enable)
+		uicc_cfg |= UICC_CLK_EN_MASK;
+	axi2cfg_writel(uicc_cfg, AXI2CFG_UICC_CFG_REG_OFFSET);
+
+	mutex_unlock(&uicc_cfg_mutex);
+
+	return len;
+}
+static DEVICE_ATTR(clk_en, 0644, uicc_clk_en_show, uicc_clk_en_store);
+
+int __init picoxcell_add_uicc(unsigned long addr, int irq, int id,
+			      bool data_invert)
+{
+	struct platform_device *pdev;
+	int err;
+	unsigned long uicc_cfg;
+	const struct mux_cfg muxcfg[] = {
+		MUXCFG("usim_clk", MUX_PERIPHERAL_USIM),
+		MUXCFG("usim_io", MUX_PERIPHERAL_USIM),
+	};
+
+	pdev = picoxcell_add_uart(addr, irq, id);
+	if (IS_ERR(pdev))
+		return PTR_ERR(pdev);
+
+	err = device_create_file(&pdev->dev, &dev_attr_clk_en);
+	if (err) {
+		dev_err(&pdev->dev, "failed to create clk_en attr\n");
+		goto out_put_dev;
+	}
+
+	err = mux_configure_table(muxcfg, ARRAY_SIZE(muxcfg));
+	if (err) {
+		dev_err(&pdev->dev, "failed to configure muxing\n");
+		goto out_remove_attr;
+	}
+
+	uicc_cfg = axi2cfg_readl(AXI2CFG_UICC_CFG_REG_OFFSET);
+	uicc_cfg |= UICC_DATA_EN_MASK;
+	uicc_cfg &= ~UICC_DATA_INVERT_MASK;
+	if (data_invert)
+		uicc_cfg |= UICC_DATA_INVERT_MASK;
+	axi2cfg_writel(uicc_cfg, AXI2CFG_UICC_CFG_REG_OFFSET);
+
+	return 0;
+
+out_remove_attr:
+	device_remove_file(&pdev->dev, &dev_attr_clk_en);
+out_put_dev:
+	platform_device_unregister(pdev);
+
+	return err;
+}
+
diff --git a/arch/arm/mach-picoxcell/include/mach/picoxcell/axi2cfg.h b/arch/arm/mach-picoxcell/include/mach/picoxcell/axi2cfg.h
index 1d8afc3..f0326d6 100644
--- a/arch/arm/mach-picoxcell/include/mach/picoxcell/axi2cfg.h
+++ b/arch/arm/mach-picoxcell/include/mach/picoxcell/axi2cfg.h
@@ -34,6 +34,7 @@
 #define AXI2CFG_AXI_ERR_STATE_REG_OFFSET	0x0030
 #define AXI2CFG_CLOCK_GATING_REG_OFFSET		0x0048
 #define AXI2CFG_ID_REG_OFFSET			0x0068
+#define AXI2CFG_UICC_CFG_REG_OFFSET		0x00C0
 #define AXI2CFG_CONFIG_WRITE_REG_OFFSET		0x0100
 #define AXI2CFG_CONFIG_READ_REG_OFFSET		0x0200
 #define AXI2CFG_DMAC1_CONFIG_REG_OFFSET		0x0300
diff --git a/arch/arm/mach-picoxcell/mux.c b/arch/arm/mach-picoxcell/mux.c
index c9cc94e..6514e08 100644
--- a/arch/arm/mach-picoxcell/mux.c
+++ b/arch/arm/mach-picoxcell/mux.c
@@ -37,6 +37,7 @@ static const char *mux_peripheral_names[NR_MUX_SETTINGS] = {
 	[MUX_PERIPHERAL_SSI]	= "ssi",
 	[MUX_PERIPHERAL_MII]	= "mii",
 	[MUX_PERIPHERAL_MAXIM]	= "maxim",
+	[MUX_PERIPHERAL_USIM]	= "usim",
 };
 
 static int mux_periph_name_to_id(const char *name)
diff --git a/arch/arm/mach-picoxcell/mux.h b/arch/arm/mach-picoxcell/mux.h
index ef648d7..0f9e219 100644
--- a/arch/arm/mach-picoxcell/mux.h
+++ b/arch/arm/mach-picoxcell/mux.h
@@ -29,6 +29,7 @@ enum mux_setting {
 	MUX_PERIPHERAL_SSI,
 	MUX_PERIPHERAL_MII,
 	MUX_PERIPHERAL_MAXIM,
+	MUX_PERIPHERAL_USIM,
 	NR_MUX_SETTINGS,
 };
 
@@ -67,6 +68,9 @@ struct mux_cfg {
 	enum mux_setting	setting;
 };
 
+#define MUXCFG(__name, __setting) \
+	{ .name = __name, .setting = __setting }
+
 extern int mux_configure_one(const char *name, enum mux_setting setting);
 extern int mux_configure_table(const struct mux_cfg *cfg,
 			       unsigned int nr_cfgs);
diff --git a/arch/arm/mach-picoxcell/pc30xx.c b/arch/arm/mach-picoxcell/pc30xx.c
index 9dc11d1..31d33f7 100644
--- a/arch/arm/mach-picoxcell/pc30xx.c
+++ b/arch/arm/mach-picoxcell/pc30xx.c
@@ -711,8 +711,8 @@ static void pc30xx_add_otp(void)
 
 static struct mux_def pc30xx_hnb_mux[] = {
 	/*	Name		ARM	SD	PERIPH	REG	BIT	PERREG	PERBIT	FLAGS */
-	MUXGPIO(usim_clk,	0,	16,	RSVD,	0x34,	0,	-1,	-1,	0),
-	MUXGPIO(usim_io,	1,	17,	RSVD,	0x34,	1,	-1,	-1,	0),
+	MUXGPIO(usim_clk,	0,	16,	USIM,	0x34,	0,	0xc0,	4,	MUX_INVERT_PERIPH),
+	MUXGPIO(usim_io,	1,	17,	USIM,	0x34,	1,	0xc0,	1,	MUX_INVERT_PERIPH),
 	MUXGPIO(usim_vcc,	2,	18,	RSVD,	0x34,	2,	-1,	-1,	0),
 	MUXGPIO(usim_rst,	3,	19,	RSVD,	0x34,	3,	-1,	-1,	0),
 	MUXGPIO(usim_cd,	4,	20,	RSVD,	0x34,	4,	-1,	-1,	0),
diff --git a/arch/arm/mach-picoxcell/picoxcell_core.h b/arch/arm/mach-picoxcell/picoxcell_core.h
index c75744c..b29d91b 100644
--- a/arch/arm/mach-picoxcell/picoxcell_core.h
+++ b/arch/arm/mach-picoxcell/picoxcell_core.h
@@ -42,6 +42,8 @@ extern int __init picoxcell_add_emac(unsigned long addr, int irq,
 
 struct picoxcell_fuse_map;
 extern int __init picoxcell_add_fuse(struct picoxcell_fuse_map *map);
+extern int __init picoxcell_add_uicc(unsigned long addr, int irq, int id,
+				     bool data_invert);
 
 extern int picoxcell_is_pc3x2(void);
 extern int picoxcell_is_pc3x3(void);
-- 
1.7.0.4

