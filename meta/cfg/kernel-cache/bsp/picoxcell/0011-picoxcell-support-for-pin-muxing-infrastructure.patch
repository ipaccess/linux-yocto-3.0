From 6d6368c1e51b53da6ba0e2489eb31d94787e7daf Mon Sep 17 00:00:00 2001
From: Jamie Iles <jamie@jamieiles.com>
Date: Mon, 7 Mar 2011 15:32:18 +0000
Subject: [PATCH 011/228] picoxcell: support for pin muxing infrastructure

picoxcell devices have a number of multiplexed pins which may be
either SD (Sigma-Delta) GPIO, ARM GPIO or one or more peripherals.
Provide a mechanism for the board initialization code to configure
the multiplexing.

Signed-off-by: Jamie Iles <jamie@jamieiles.com>
---
 arch/arm/mach-picoxcell/Makefile |    3 +-
 arch/arm/mach-picoxcell/mux.c    |  381 ++++++++++++++++++++++++++++++++++++++
 arch/arm/mach-picoxcell/mux.h    |   98 ++++++++++
 3 files changed, 481 insertions(+), 1 deletions(-)
 create mode 100644 arch/arm/mach-picoxcell/mux.c
 create mode 100644 arch/arm/mach-picoxcell/mux.h

diff --git a/arch/arm/mach-picoxcell/Makefile b/arch/arm/mach-picoxcell/Makefile
index 6bdd7a1..b137725 100644
--- a/arch/arm/mach-picoxcell/Makefile
+++ b/arch/arm/mach-picoxcell/Makefile
@@ -1,7 +1,8 @@
 obj-y				:= picoxcell_core.o io.o axi2cfg.o \
 				   time.o \
 				   devices.o \
-				   clk.o
+				   clk.o \
+				   mux.o
 obj-$(CONFIG_BOARD_PC7302)	+= board_pc7302.o
 obj-$(CONFIG_PICOXCELL_PC3X2)	+= pc3x2.o
 obj-$(CONFIG_PICOXCELL_PC3X3)	+= pc3x3.o
diff --git a/arch/arm/mach-picoxcell/mux.c b/arch/arm/mach-picoxcell/mux.c
new file mode 100644
index 0000000..d47c51b
--- /dev/null
+++ b/arch/arm/mach-picoxcell/mux.c
@@ -0,0 +1,381 @@
+/*
+ * Copyright (c) 2010 Picochip Ltd., Jamie Iles
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * All enquiries to support@picochip.com
+ */
+#define pr_fmt(fmt) "picoxcell_mux: " fmt
+
+#include <linux/bitops.h>
+#include <linux/debugfs.h>
+#include <linux/errno.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/seq_file.h>
+#include <linux/string.h>
+
+#include <mach/hardware.h>
+
+#include "mux.h"
+
+static void muxing_sysfs_init(void);
+static void picoxcell_muxing_debugfs_init(void);
+
+static struct {
+	struct mux_def		*defs;
+	int			num_defs;
+} mux_info;
+
+static const char *mux_peripheral_names[NR_MUX_SETTINGS] = {
+	[MUX_ARM]		= "armgpio",
+	[MUX_SD]		= "sdgpio",
+	[MUX_UNMUXED]		= "unmuxed",
+	[MUX_PERIPHERAL_FRACN]	= "fracn",
+	[MUX_PERIPHERAL_EBI]	= "ebi",
+	[MUX_PERIPHERAL_PAI]	= "pai",
+	[MUX_PERIPHERAL_DECODE]	= "decode",
+	[MUX_PERIPHERAL_SSI]	= "ssi",
+	[MUX_PERIPHERAL_MII]	= "mii",
+	[MUX_PERIPHERAL_MAXIM]	= "maxim",
+};
+
+static int mux_periph_name_to_id(const char *name)
+{
+	int i;
+
+	for (i = 0; i < NR_MUX_SETTINGS; ++i)
+		if (sysfs_streq(mux_peripheral_names[i], name))
+			return i;
+
+	return -EINVAL;
+}
+
+static const char *mux_periph_id_to_name(enum mux_setting setting)
+{
+	if (setting < 0 || setting >= NR_MUX_SETTINGS)
+		return "<invalid>";
+
+	return mux_peripheral_names[setting];
+}
+
+void picoxcell_mux_register(struct mux_def *defs, int nr_defs)
+{
+	BUG_ON(!defs);
+
+	mux_info.num_defs	= nr_defs;
+	mux_info.defs		= defs;
+
+	muxing_sysfs_init();
+	picoxcell_muxing_debugfs_init();
+}
+
+static enum mux_setting mux_get_config_bus(struct mux_def *def)
+{
+	u16 data = 0;
+
+	/* Wake the AE up. */
+	axi2cfg_config_write(def->caeid, 0xA060, &data, 1);
+
+	/* Read the current mask. */
+	if (axi2cfg_config_read(def->caeid, def->caddr, &data, 1) != 1) {
+		pr_warn("failed to read the muxing setting\n");
+		return -EIO;
+	}
+
+	if ((data & def->mask) == def->mask) {
+		if (def->armgpio >= 0)
+			return MUX_ARM;
+		if (def->sdgpio >= 0)
+			return MUX_SD;
+	}
+
+	return def->periph;
+}
+
+static int mux_set_config_bus(struct mux_def *def, enum mux_setting setting)
+{
+	u16 data = 0;
+
+	if (setting != MUX_ARM && setting != MUX_SD)
+		return -EINVAL;
+
+	if ((setting == MUX_ARM && def->armgpio < 0) ||
+	    (setting == MUX_SD && def->sdgpio < 0))
+		return -EINVAL;
+
+	/* Wake the AE up. */
+	axi2cfg_config_write(def->caeid, 0xA060, &data, 1);
+
+	/* Set the new muxing mask. */
+	if (axi2cfg_config_read(def->caeid, def->caddr, &data, 1) != 1)
+		return -EIO;
+	data |= def->mask;
+	axi2cfg_config_write(def->caeid, def->caddr, &data, 1);
+
+	return 0;
+}
+
+static enum mux_setting mux_get_setting(struct mux_def *def)
+{
+	unsigned long periph_ctrl, gpio_sel;
+
+	if (def->flags & MUX_CONFIG_BUS)
+		return mux_get_config_bus(def);
+
+	if (def->periph >= 0) {
+		periph_ctrl = axi2cfg_readl(def->periph_reg);
+
+		if (def->flags & MUX_INVERT_PERIPH) {
+			if (periph_ctrl & (1 << def->periph_bit))
+				return def->periph;
+		} else if (~periph_ctrl & (1 << def->periph_bit)) {
+			return def->periph;
+		}
+	}
+
+	if (def->armgpio >= 0 && def->sdgpio < 0)
+		return MUX_ARM;
+
+	if (def->sdgpio >= 0 && def->armgpio < 0)
+		return MUX_SD;
+
+	gpio_sel = axi2cfg_readl(def->gpio_reg_offs);
+
+	return gpio_sel & (1 << def->gpio_reg_bit) ? MUX_ARM : MUX_SD;
+}
+
+static int mux_configure(struct mux_def *def, enum mux_setting setting)
+{
+	unsigned long periph_ctrl;
+
+	if (def->flags & MUX_RO)
+		return -EPERM;
+
+	if (def->flags & MUX_CONFIG_BUS)
+		return mux_set_config_bus(def, setting);
+
+	if (!((def->armgpio >= 0 && setting == MUX_ARM) ||
+	      (def->sdgpio >= 0 && setting == MUX_SD) ||
+	      (def->periph >= 0 && setting == def->periph)))
+		return -EINVAL;
+
+	if (def->periph > 0) {
+		periph_ctrl = axi2cfg_readl(def->periph_reg);
+
+		if (setting == def->periph) {
+			/* Enable the peripheral. */
+			if (def->flags & MUX_INVERT_PERIPH)
+				periph_ctrl |= (1 << def->periph_bit);
+			else
+				periph_ctrl &= ~(1 << def->periph_bit);
+		} else {
+			/* Disable the peripheral. */
+			if (def->flags & MUX_INVERT_PERIPH)
+				periph_ctrl &= ~(1 << def->periph_bit);
+			else
+				periph_ctrl |= (1 << def->periph_bit);
+		}
+		axi2cfg_writel(periph_ctrl, def->periph_reg);
+	}
+
+	if (setting != def->periph && def->gpio_reg_offs >= 0) {
+		unsigned long gpio_sel = axi2cfg_readl(def->gpio_reg_offs);
+
+		if (setting == MUX_SD)
+			gpio_sel &= ~(1 << def->gpio_reg_bit);
+		else
+			gpio_sel |= (1 << def->gpio_reg_bit);
+
+		axi2cfg_writel(gpio_sel, def->gpio_reg_offs);
+	}
+
+	return 0;
+}
+
+int mux_configure_one(const char *name, enum mux_setting setting)
+{
+	struct mux_def *def = NULL;
+	int i;
+
+	for (i = 0; i < mux_info.num_defs; ++i)
+		if (!strcmp(name, mux_info.defs[i].name)) {
+			def = &mux_info.defs[i];
+			break;
+		}
+
+	if (!def)
+		return -ENXIO;
+
+	return mux_configure(def, setting);
+}
+
+int mux_configure_table(const struct mux_cfg *cfg,
+			unsigned int nr_cfgs)
+{
+	unsigned int n;
+	int ret = 0;
+
+	for (n = 0; n < nr_cfgs; ++n) {
+		ret = mux_configure_one(cfg[n].name, cfg[n].setting);
+		if (ret)
+			break;
+	}
+
+	return ret;
+}
+
+static const char *pin_setting_name(struct mux_def *pin)
+{
+	enum mux_setting setting = mux_get_setting(pin);
+
+	return mux_periph_id_to_name(setting);
+}
+
+static inline struct mux_def *to_mux_def(struct sysdev_attribute *attr)
+{
+	return container_of(attr, struct mux_def, attr);
+}
+
+ssize_t pin_show(struct sys_device *dev, struct sysdev_attribute *attr,
+		 char *buf)
+{
+	struct mux_def *pin = to_mux_def(attr);
+
+	return snprintf(buf, PAGE_SIZE, "%s\n", pin_setting_name(pin));
+}
+
+ssize_t pin_store(struct sys_device *dev, struct sysdev_attribute *attr,
+		  const char *buf, size_t len)
+{
+	ssize_t ret = -EINVAL;
+	struct mux_def *def = to_mux_def(attr);
+	enum mux_setting setting, new_setting;
+
+	if (sysfs_streq(buf, "sdgpio"))
+		setting = MUX_SD;
+	else if (sysfs_streq(buf, "armgpio"))
+		setting = MUX_ARM;
+	else if (def->periph >= 0 && sysfs_streq(buf, "peripheral"))
+		setting = def->periph;
+	else
+		setting = mux_periph_name_to_id(buf);
+
+	ret = mux_configure(def, setting);
+	if (ret) {
+		pr_warn("failed to configure muxing for %s to %s\n",
+			def->name, mux_periph_id_to_name(setting));
+		return ret;
+	}
+
+	new_setting = mux_get_setting(def);
+	if (new_setting != setting) {
+		pr_warn("failed to set muxing for %s to %s (got %s)\n",
+			def->name, mux_periph_id_to_name(setting),
+			mux_periph_id_to_name(new_setting));
+		return -EBUSY;
+	}
+
+	return len;
+}
+
+static struct sysdev_class muxing_class = {
+	.name		= "io_muxing",
+};
+
+static struct sys_device muxing_device = {
+	.id		= 0,
+	.cls		= &muxing_class,
+};
+
+static void muxing_sysfs_init(void)
+{
+	int i, err = sysdev_class_register(&muxing_class);
+
+	if (err) {
+		pr_err("unable to register sysdev class (%d)\n", err);
+		return;
+	}
+
+	err = sysdev_register(&muxing_device);
+	if (err) {
+		pr_err("unable to register sysdev device (%d)\n", err);
+		return;
+	}
+
+	for (i = 0; i < mux_info.num_defs; ++i) {
+		struct mux_def *def = &mux_info.defs[i];
+
+		err = sysdev_create_file(&muxing_device, &def->attr);
+		if (err)
+			WARN("unable to create attr for %s\n", def->name);
+	}
+}
+
+static ssize_t io_muxing_seq_show(struct seq_file *s, void *v)
+{
+	int i = (int)*(loff_t *)v;
+	struct mux_def *def = &mux_info.defs[i];
+
+	if (i == 0)
+		seq_printf(s, "%16s%16s%10s%10s\n\n",
+			   "pin_name", "setting", "arm pin", "sd pin");
+
+
+	return seq_printf(s, "%16s%16s%10d%10d\n", def->name,
+			  pin_setting_name(def), def->armgpio, def->sdgpio);
+}
+
+static void *io_muxing_seq_start(struct seq_file *s, loff_t *pos)
+{
+	if (*pos >= mux_info.num_defs)
+		return NULL;
+
+	return pos;
+}
+
+static void *io_muxing_seq_next(struct seq_file *s, void *v, loff_t *pos)
+{
+	(*pos)++;
+
+	return (*pos < mux_info.num_defs) ? pos : NULL;
+}
+
+static void io_muxing_seq_stop(struct seq_file *s, void *v)
+{
+}
+
+static const struct seq_operations io_muxing_seq_ops = {
+	.start		= io_muxing_seq_start,
+	.next		= io_muxing_seq_next,
+	.stop		= io_muxing_seq_stop,
+	.show		= io_muxing_seq_show,
+};
+
+static int io_muxing_debugfs_open(struct inode *inode, struct file *filp)
+{
+	return seq_open(filp, &io_muxing_seq_ops);
+}
+
+static const struct file_operations io_muxing_debugfs_fops = {
+	.owner		= THIS_MODULE,
+	.open		= io_muxing_debugfs_open,
+	.llseek		= seq_lseek,
+	.read		= seq_read,
+	.release	= seq_release,
+};
+
+static void picoxcell_muxing_debugfs_init(void)
+{
+	/* We only get called if debugfs is enabled and configured. */
+	struct dentry *mux_debugfs_file =
+		debugfs_create_file("io_muxing", 0444, picoxcell_debugfs, NULL,
+				    &io_muxing_debugfs_fops);
+	if (IS_ERR(mux_debugfs_file)) {
+		pr_err("failed to create io_muxing debugfs entry (%ld)\n",
+		       PTR_ERR(mux_debugfs_file));
+	}
+}
diff --git a/arch/arm/mach-picoxcell/mux.h b/arch/arm/mach-picoxcell/mux.h
new file mode 100644
index 0000000..865514c
--- /dev/null
+++ b/arch/arm/mach-picoxcell/mux.h
@@ -0,0 +1,98 @@
+/*
+ * linux/arch/arm/mach-picoxcell/mux.h
+ *
+ * Copyright (c) 2010 Picochip Ltd., Jamie Iles
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * All enquiries to support@picochip.com
+ */
+#ifndef __MUX_H__
+#define __MUX_H__
+
+#include <linux/sysdev.h>
+
+#include "soc.h"
+
+enum mux_setting {
+	MUX_PERIPHERAL_RSVD	= -1,
+	MUX_UNMUXED,
+	MUX_ARM,
+	MUX_SD,
+	MUX_PERIPHERAL_FRACN,
+	MUX_PERIPHERAL_EBI,
+	MUX_PERIPHERAL_PAI,
+	MUX_PERIPHERAL_DECODE,
+	MUX_PERIPHERAL_SSI,
+	MUX_PERIPHERAL_MII,
+	MUX_PERIPHERAL_MAXIM,
+	NR_MUX_SETTINGS,
+};
+
+enum mux_flags {
+	MUX_RO			= (1 << 0),
+	MUX_INVERT_PERIPH	= (1 << 1),
+	MUX_CONFIG_BUS		= (1 << 2),
+};
+
+extern ssize_t pin_show(struct sys_device *dev, struct sysdev_attribute *attr,
+			char *buf);
+extern ssize_t pin_store(struct sys_device *dev, struct sysdev_attribute *attr,
+			 const char *buf, size_t len);
+
+struct mux_def {
+	struct sysdev_attribute	attr;
+	const char		*name;
+	int			armgpio;
+	int			sdgpio;
+	int			periph;
+	s16			gpio_reg_offs;
+	s16			gpio_reg_bit;
+	s16			periph_reg;
+	s16			periph_bit;
+	u16			caeid;
+	u16			caddr;
+	u16			mask;
+	unsigned		flags;
+};
+
+struct mux_cfg {
+	const char		*name;
+	enum mux_setting	setting;
+};
+
+extern int mux_configure_one(const char *name, enum mux_setting setting);
+extern int mux_configure_table(const struct mux_cfg *cfg,
+			       unsigned int nr_cfgs);
+
+#define MUXGPIO(__name, __arm, __sd, __periph, __gpio_reg, __gpio_bit, \
+		__periph_reg, __periph_bit, __flags) { \
+	.name		= #__name, \
+	.armgpio	= __arm, \
+	.sdgpio		= __sd, \
+	.periph		= MUX_PERIPHERAL_ ## __periph, \
+	.gpio_reg_offs	= __gpio_reg, \
+	.gpio_reg_bit	= __gpio_bit, \
+	.periph_reg	= __periph_reg, \
+	.periph_bit	= __periph_bit, \
+	.flags		= __flags, \
+	.attr		= _SYSDEV_ATTR(__name, 0644, pin_show, pin_store), \
+}
+
+#define MUXCFGBUS(__name, __arm, __sd, __periph, __caeid, __caddr, __mask) { \
+	.name		= #__name, \
+	.armgpio	= __arm, \
+	.sdgpio		= __sd, \
+	.periph		= MUX_PERIPHERAL_ ## __periph, \
+	.caeid		= __caeid, \
+	.caddr		= __caddr, \
+	.flags		= MUX_CONFIG_BUS, \
+	.mask		= __mask, \
+	.attr		= _SYSDEV_ATTR(__name, 0644, pin_show, pin_store), \
+}
+
+extern void picoxcell_mux_register(struct mux_def *defs, int nr_defs);
+
+#endif /* __MUX_H__ */
-- 
1.7.0.4

