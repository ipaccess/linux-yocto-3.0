From d07815a21ee78abf0e0efd698ec3a45a4f52969b Mon Sep 17 00:00:00 2001
From: Dave Aldridge <david.aldridge@picochip.com>
Date: Wed, 31 Oct 2012 09:24:25 +0000
Subject: [PATCH 210/228] nand: fixup onfi parameter reading

The NAND_CMD_PARAM command now works correctly. This enables the
nand flash onfi parameter tables to be read, assuming an onfi compliant
nand flash is being used

This commit forms part of the resoultion of Mantis Issue #10680
---
 drivers/mtd/nand/denali.c |   41 ++++++++++++++++++++++++++++-------------
 1 files changed, 28 insertions(+), 13 deletions(-)

diff --git a/drivers/mtd/nand/denali.c b/drivers/mtd/nand/denali.c
index d61b3af..dcc50e9 100644
--- a/drivers/mtd/nand/denali.c
+++ b/drivers/mtd/nand/denali.c
@@ -848,7 +848,7 @@ static int write_oob_data(struct mtd_info *mtd, uint8_t *buf, int page)
 		dev_err(denali->dev, "unable to send pipeline command\n");
 		status = -EIO;
 	}
-        
+
 	/* We set the device back to MAIN_ACCESS here as I observed
 	 * instability with the controller if you do a block erase
 	 * and the last transaction was a SPARE_ACCESS. Block erase
@@ -858,7 +858,7 @@ static int write_oob_data(struct mtd_info *mtd, uint8_t *buf, int page)
 	addr = BANK (denali->flash_bank) | denali->page;
 	cmd = MODE_10 | addr;
 	index_addr (denali, (uint32_t) cmd, MAIN_ACCESS);
-        
+
 	return status;
 }
 
@@ -868,7 +868,7 @@ static void read_oob_data(struct mtd_info *mtd, uint8_t *buf, int page)
 	struct denali_nand_info *denali = mtd_to_denali(mtd);
 	uint32_t irq_status = 0, addr = 0x0, cmd = 0x0;
 	uint32_t irq_mask = INTR_STATUS__LOAD_COMP;
-			 
+
 	denali->page = page;
 
 	if (denali_send_pipeline_cmd(denali, false, true, SPARE_ACCESS,
@@ -1240,6 +1240,14 @@ static uint8_t denali_read_byte(struct mtd_info *mtd)
 	return result;
 }
 
+static void denali_read_buf (struct mtd_info *mtd, uint8_t *buf, int len)
+{
+	struct denali_nand_info *denali = mtd_to_denali(mtd);
+
+	BUG_ON(len > sizeof(denali->buf.buf));
+	memcpy(buf, denali->buf.buf, len);
+}
+
 static void denali_select_chip(struct mtd_info *mtd, int chip)
 {
 	struct denali_nand_info *denali = mtd_to_denali(mtd);
@@ -1283,8 +1291,14 @@ static void denali_cmdfunc(struct mtd_info *mtd, unsigned int cmd, int col,
 			   int page)
 {
 	struct denali_nand_info *denali = mtd_to_denali(mtd);
+	struct nand_chip *nand = mtd->priv;
+	struct nand_onfi_params *p = &nand->onfi_params;
+
 	uint32_t addr, id;
-	int i;
+	int i, bytes_to_read;
+
+	/* read three copies of the onfi parameter pages */
+	bytes_to_read = sizeof(*p) * 3;
 
 	switch (cmd) {
 	case NAND_CMD_PAGEPROG:
@@ -1293,16 +1307,16 @@ static void denali_cmdfunc(struct mtd_info *mtd, unsigned int cmd, int col,
 		read_status(denali);
 		break;
 	case NAND_CMD_READID:
+		bytes_to_read = 5;
+		/* fall through */
 	case NAND_CMD_PARAM:
-		reset_buf(denali);
-		/*sometimes ManufactureId read from register is not right
-		 * e.g. some of Micron MT29F32G08QAA MLC NAND chips
-		 * So here we send READID cmd to NAND insteand
-		 * */
-		addr = (uint32_t)MODE_11 | BANK(denali->flash_bank);
-		index_addr(denali, (uint32_t)addr | 0, 0x90);
-		index_addr(denali, (uint32_t)addr | 1, 0);
-		for (i = 0; i < 5; i++) {
+		reset_buf (denali);
+		addr = (uint32_t) MODE_11 | BANK (denali->flash_bank);
+		index_addr (denali, (uint32_t) addr | 0, cmd);
+		index_addr (denali, (uint32_t) addr | 1, col);
+		/* Allow the flash memory to respond */
+		udelay (100);
+		for (i = 0; i < bytes_to_read; i++) {
 			index_addr_read_data(denali,
 						(uint32_t)addr | 2,
 						&id);
@@ -1497,6 +1511,7 @@ int denali_init(struct denali_nand_info *denali)
 	denali->nand.select_chip = denali_select_chip;
 	denali->nand.cmdfunc = denali_cmdfunc;
 	denali->nand.read_byte = denali_read_byte;
+	denali->nand.read_buf = denali_read_buf;
 	denali->nand.waitfunc = denali_waitfunc;
 
 	/* scan for NAND devices attached to the controller
-- 
1.7.0.4

