From f79cf8ff904e1156949963de9bb7abd91c45902d Mon Sep 17 00:00:00 2001
From: Jamie Iles <jamie@jamieiles.com>
Date: Thu, 21 Apr 2011 17:09:56 +0100
Subject: [PATCH 109/228] picoxcell/pc30xx: muxing definitions

Add the muxing options for PC30XX devices.  Currently there are no
device ID's assigned for LABS parts so we only register the HNB muxing
options for PC3008.  The LABS definitions are present but marked as
__used for completeness.

Signed-off-by: Jamie Iles <jamie@jamieiles.com>
---
 .../include/mach/picoxcell/axi2cfg.h               |    1 +
 arch/arm/mach-picoxcell/mux.c                      |    3 +
 arch/arm/mach-picoxcell/mux.h                      |   11 ++
 arch/arm/mach-picoxcell/pc30xx.c                   |  104 ++++++++++++++++++++
 4 files changed, 119 insertions(+), 0 deletions(-)

diff --git a/arch/arm/mach-picoxcell/include/mach/picoxcell/axi2cfg.h b/arch/arm/mach-picoxcell/include/mach/picoxcell/axi2cfg.h
index 7ef7e7f..1d8afc3 100644
--- a/arch/arm/mach-picoxcell/include/mach/picoxcell/axi2cfg.h
+++ b/arch/arm/mach-picoxcell/include/mach/picoxcell/axi2cfg.h
@@ -33,6 +33,7 @@
 #define AXI2CFG_AXI_ERR_RAW_REG_OFFSET		0x002C
 #define AXI2CFG_AXI_ERR_STATE_REG_OFFSET	0x0030
 #define AXI2CFG_CLOCK_GATING_REG_OFFSET		0x0048
+#define AXI2CFG_ID_REG_OFFSET			0x0068
 #define AXI2CFG_CONFIG_WRITE_REG_OFFSET		0x0100
 #define AXI2CFG_CONFIG_READ_REG_OFFSET		0x0200
 #define AXI2CFG_DMAC1_CONFIG_REG_OFFSET		0x0300
diff --git a/arch/arm/mach-picoxcell/mux.c b/arch/arm/mach-picoxcell/mux.c
index db7f4b3..c9cc94e 100644
--- a/arch/arm/mach-picoxcell/mux.c
+++ b/arch/arm/mach-picoxcell/mux.c
@@ -125,6 +125,9 @@ static enum mux_setting mux_get_setting(struct mux_def *def)
 {
 	unsigned long periph_ctrl, gpio_sel;
 
+	if (def->get_setting)
+		return def->get_setting(def);
+
 	if (def->flags & MUX_CONFIG_BUS)
 		return mux_get_config_bus(def);
 
diff --git a/arch/arm/mach-picoxcell/mux.h b/arch/arm/mach-picoxcell/mux.h
index 9ddc0ad..ef648d7 100644
--- a/arch/arm/mach-picoxcell/mux.h
+++ b/arch/arm/mach-picoxcell/mux.h
@@ -59,6 +59,7 @@ struct mux_def {
 	u16			mask;
 	unsigned		flags;
 	struct list_head	head;
+	enum mux_setting	(*get_setting)(const struct mux_def *def);
 };
 
 struct mux_cfg {
@@ -110,6 +111,16 @@ extern int mux_configure_table(const struct mux_cfg *cfg,
 	.periph_b	= -1, \
 }
 
+#define MUXGPIOFUNC(__name, __arm, __sd, __periph, __get_func) { \
+	.name		= #__name, \
+	.armgpio	= __arm, \
+	.sdgpio		= __sd, \
+	.periph		= MUX_PERIPHERAL_ ## __periph, \
+	.get_setting	= __get_func, \
+	.attr		= _SYSDEV_ATTR(__name, 0644, pin_show, pin_store), \
+	.flags		= MUX_RO, \
+}
+
 extern void picoxcell_mux_register(struct mux_def *defs, int nr_defs);
 
 #endif /* __MUX_H__ */
diff --git a/arch/arm/mach-picoxcell/pc30xx.c b/arch/arm/mach-picoxcell/pc30xx.c
index a602baa..cc7bb3f 100644
--- a/arch/arm/mach-picoxcell/pc30xx.c
+++ b/arch/arm/mach-picoxcell/pc30xx.c
@@ -23,6 +23,7 @@
 #include <mach/clkdev.h>
 #include <mach/hardware.h>
 
+#include "mux.h"
 #include "picoxcell_core.h"
 #include "soc.h"
 
@@ -633,8 +634,111 @@ static void pc30xx_add_otp(void)
 	platform_device_register_simple("picoxcell-otp-pc30xx", -1, &res, 1);
 }
 
+static struct mux_def pc30xx_hnb_mux[] = {
+	/*	Name		ARM	SD	PERIPH	REG	BIT	PERREG	PERBIT	FLAGS */
+	MUXGPIO(usim_clk,	0,	16,	RSVD,	0x34,	0,	-1,	-1,	0),
+	MUXGPIO(usim_io,	1,	17,	RSVD,	0x34,	1,	-1,	-1,	0),
+	MUXGPIO(usim_vcc,	2,	18,	RSVD,	0x34,	2,	-1,	-1,	0),
+	MUXGPIO(usim_rst,	3,	19,	RSVD,	0x34,	3,	-1,	-1,	0),
+	MUXGPIO(usim_cd,	4,	20,	RSVD,	0x34,	4,	-1,	-1,	0),
+	MUXGPIO(shd_gpio5,	5,	21,	RSVD,	0x34,	5,	-1,	-1,	0),
+	MUXGPIO(shd_gpio6,	6,	22,	RSVD,	0x34,	6,	-1,	-1,	0),
+	MUXGPIO(shd_gpio7,	7,	23,	RSVD,	0x34,	7,	-1,	-1,	0),
+	MUXGPIO(shd_gpio8,	8,	8,	RSVD,	0x34,	8,	-1,	-1,	0),
+	MUXGPIO(shd_gpio9,	9,	9,	RSVD,	0x34,	9,	-1,	-1,	0),
+	MUXGPIO(shd_gpio10,	10,	10,	RSVD,	0x34,	10,	-1,	-1,	0),
+	MUXGPIO(shd_gpio11,	11,	11,	RSVD,	0x34,	11,	-1,	-1,	0),
+	MUXGPIO(shd_gpio12,	12,	12,	RSVD,	0x34,	12,	-1,	-1,	0),
+	MUXGPIO(shd_gpio13,	13,	13,	RSVD,	0x34,	13,	-1,	-1,	0),
+	MUXGPIO(shd_gpio14,	14,	14,	RSVD,	0x34,	14,	-1,	-1,	0),
+	MUXGPIO(shd_gpio15,	15,	15,	FRACN,	0x34,	15,	0,	7,	MUX_INVERT_PERIPH),
+	MUXGPIO(boot_mode0,	16,	0,	RSVD,	0x34,	16,	-1,	-1,	0),
+	MUXGPIO(boot_mode1,	17,	1,	RSVD,	0x34,	17,	-1,	-1,	0),
+	MUXGPIO(input_clk_sel0,	18,	2,	RSVD,	0x34,	18,	-1,	-1,	0),
+	MUXGPIO(input_clk_sel1,	19,	3,	RSVD,	0x34,	19,	-1,	-1,	0),
+	MUXGPIO(ssi_data_out,	22,	6,	SSI,	0x34,	22,	0x44,	0,	0),
+	MUXGPIO(ssi_clk,	23,	7,	SSI,	0x34,	23,	0x44,	0,	0),
+	MUXGPIO(ssi_data_in,	24,	-1,	SSI,	-1,	-1,	0x44,	0,	0),
+	MUXGPIO(decode0,	25,	-1,	EBI,	-1,	-1,	0x40,	0,	0),
+	MUXGPIO(decode1,	26,	-1,	EBI,	-1,	-1,	0x40,	1,	0),
+	MUXGPIO(ebi_clk,	29,	-1,	EBI,	-1,	-1,	0x3c,	13,	0),
+	MUXGPIO(pai_tx_data0,	47,	-1,	PAI,	-1,	-1,	0x38,	0,	0),
+	MUXGPIO(pai_tx_data1,	48,	-1,	PAI,	-1,	-1,	0x38,	1,	0),
+	MUXGPIO(pai_tx_data2,	49,	-1,	PAI,	-1,	-1,	0x38,	2,	0),
+	MUXGPIO(pai_tx_data3,	50,	-1,	PAI,	-1,	-1,	0x38,	3,	0),
+	MUXGPIO(pai_tx_data4,	51,	-1,	PAI,	-1,	-1,	0x38,	4,	0),
+	MUXGPIO(pai_tx_data5,	52,	-1,	PAI,	-1,	-1,	0x38,	5,	0),
+	MUXGPIO(pai_tx_data6,	53,	-1,	PAI,	-1,	-1,	0x38,	6,	0),
+	MUXGPIO(pai_tx_data7,	54,	-1,	PAI,	-1,	-1,	0x38,	7,	0),
+	MUXGPIO(pai_rx_data0,	55,	-1,	PAI,	-1,	-1,	0x38,	8,	0),
+	MUXGPIO(pai_rx_data1,	56,	-1,	PAI,	-1,	-1,	0x38,	9,	0),
+	MUXGPIO(pai_rx_data2,	57,	-1,	PAI,	-1,	-1,	0x38,	10,	0),
+	MUXGPIO(pai_rx_data3,	58,	-1,	PAI,	-1,	-1,	0x38,	11,	0),
+	MUXGPIO(pai_rx_data4,	59,	-1,	PAI,	-1,	-1,	0x38,	12,	0),
+	MUXGPIO(pai_rx_data5,	60,	-1,	PAI,	-1,	-1,	0x38,	13,	0),
+	MUXGPIO(pai_rx_data6,	61,	-1,	PAI,	-1,	-1,	0x38,	14,	0),
+	MUXGPIO(pai_rx_data7,	62,	-1,	PAI,	-1,	-1,	0x38,	15,	0),
+
+	/*	   Name			Periph	PeriphB	Reg	Bit */
+	MUX2PERIPH(pad_pai_tx_clk,	PAI,	MAXIM,	0x4c,	0),
+	MUX2PERIPH(pad_pai_tx_ctrl,	PAI,	MAXIM,	0x4c,	0),
+	MUX2PERIPH(pad_pai_trig_clk,	PAI,	MAXIM,	0x4c,	0),
+};
+
+static enum mux_setting mii_get_mux(const struct mux_def *def)
+{
+	unsigned long idr = axi2cfg_readl(AXI2CFG_ID_REG_OFFSET);
+
+	/* Bits 8:6 tell us the MII mode that we're using. */
+	switch ((idr >> 6) & 0x7) {
+	case 0x3:
+	case 0x7:
+		return MUX_ARM;
+	default:
+		return MUX_PERIPHERAL_MII;
+	}
+}
+
+static struct mux_def pc30xx_labs_mux[] __used = {
+	/*	Name		ARM	SD	PERIPH	REG	BIT	PERREG	PERBIT	FLAGS */
+	MUXGPIO(mii_mode0,	20,	4,	RSVD,	0x34,	20,	-1,	-1,	0),
+	MUXGPIO(mii_mode1,	21,	5,	RSVD,	0x34,	21,	-1,	-1,	0),
+	MUXGPIO(decode2,	27,	-1,	EBI,	-1,	-1,	0x40,	2,	0),
+	MUXGPIO(decode3,	28,	-1,	EBI,	-1,	-1,	0x40,	3,	0),
+	MUXGPIO(ebi_addr14,	30,	-1,	EBI,	-1,	-1,	0x3c,	0,	0),
+	MUXGPIO(ebi_addr15,	31,	-1,	EBI,	-1,	-1,	0x3c,	1,	0),
+	MUXGPIO(ebi_addr16,	32,	-1,	EBI,	-1,	-1,	0x3c,	2,	0),
+	MUXGPIO(ebi_addr17,	33,	-1,	EBI,	-1,	-1,	0x3c,	3,	0),
+	MUXGPIO(ebi_addr18,	34,	-1,	EBI,	-1,	-1,	0x3c,	4,	0),
+	MUXGPIO(ebi_addr19,	35,	-1,	EBI,	-1,	-1,	0x3c,	5,	0),
+	MUXGPIO(ebi_addr20,	36,	-1,	EBI,	-1,	-1,	0x3c,	6,	0),
+	MUXGPIO(ebi_addr21,	37,	-1,	EBI,	-1,	-1,	0x3c,	7,	0),
+	MUXGPIO(ebi_addr22,	38,	-1,	EBI,	-1,	-1,	0x3c,	8,	0),
+	MUXGPIO(ebi_addr23,	39,	-1,	EBI,	-1,	-1,	0x3c,	9,	0),
+
+	/*	    Name,		ARM,	SD,	PERIPH,	get */
+	MUXGPIOFUNC(mii_tx_data2,	40,	-1,	MII,	mii_get_mux),
+	MUXGPIOFUNC(mii_tx_data3,	41,	-1,	MII,	mii_get_mux),
+	MUXGPIOFUNC(mii_rx_data2,	42,	-1,	MII,	mii_get_mux),
+	MUXGPIOFUNC(mii_rx_data3,	43,	-1,	MII,	mii_get_mux),
+	MUXGPIOFUNC(mii_col,		44,	-1,	MII,	mii_get_mux),
+	MUXGPIOFUNC(mii_crs,		45,	-1,	MII,	mii_get_mux),
+	MUXGPIOFUNC(mii_tx_clk,		46,	-1,	MII,	mii_get_mux),
+};
+
 static void __init pc30xx_init(void)
 {
+	unsigned long device_id = axi2cfg_readl(AXI2CFG_DEVICE_ID_REG_OFFSET);
+
+	switch (device_id) {
+	case 0x30:
+		picoxcell_mux_register(pc30xx_hnb_mux,
+				       ARRAY_SIZE(pc30xx_hnb_mux));
+		break;
+
+	default:
+		panic("Unsupported device variant %lx\n", device_id);
+	}
 	pc30xx_init_bus_snoopers();
 	pc30xx_add_spaccs();
 	pc30xx_init_cpufreq();
-- 
1.7.0.4

